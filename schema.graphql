"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""Root of ... mutations"""
type Mutation {
  """Create a new Transaction"""
  TransactionCreate(input: TransactionCreateInput!): TransactionCreatePayload

  """Delete a Transaction"""
  TransactionDelete(input: TransactionDeleteInput!): TransactionDeletePayload

  """Update a Transaction"""
  TransactionUpdate(input: TransactionUpdateInput!): TransactionUpdatePayload
  userCreate(input: UserRegisterInput!): UserRegisterPayload
  userLogin(input: UserLoginInput!): UserLoginPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The root of all queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  transactions(after: String, first: Int, before: String, last: Int): TransactionConnection!
  user: User
}

type Subscription {
  TransactionNew(input: TransactionNewInput!): TransactionNewPayload
}

"""Transaction"""
type Transaction implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  owner: User
  category: String!
  price: String!
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]!
}

input TransactionCreateInput {
  name: String!
  category: String!
  price: String!
  clientMutationId: String
}

type TransactionCreatePayload {
  transactionEdge: TransactionEdge
  error: String
  success: String
  clientMutationId: String
}

input TransactionDeleteInput {
  transactionId: ID!
  clientMutationId: String
}

type TransactionDeletePayload {
  transactionId: ID
  error: String
  success: String
  clientMutationId: String
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge"""
  node: Transaction!

  """A cursor for use in pagination"""
  cursor: String!
}

input TransactionNewInput {
  clientSubscriptionId: String
}

type TransactionNewPayload {
  transaction: Transaction
  clientSubscriptionId: String
}

input TransactionUpdateInput {
  transactionId: ID!
  name: String!
  category: String!
  price: String!
  clientMutationId: String
}

type TransactionUpdatePayload {
  transactionEdge: TransactionEdge
  success: String
  error: String
  clientMutationId: String
}

"""User type"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """User's username"""
  username: String!

  """User's email"""
  email: String!
  transactions(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): TransactionConnection!
}

input UserLoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  token: String
  me: User
  clientMutationId: String
}

input UserRegisterInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterPayload {
  token: String
  error: String
  clientMutationId: String
}

